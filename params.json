{"name":"Fresh","tagline":"Fresh Programming Language","body":"fresh\r\n=====\r\n\r\nFresh Programming Language\r\n\r\nA custom lisp dialect intepreter  \r\nFirst written in Python, and being rewritten in Haskell  \r\nExample Fibonacci indexer:  \r\n  \r\n  \r\n    (define fibr  \r\n        (lambda [count current old]  \r\n            (if (< count 2)  \r\n                current  \r\n                (fibr (- count 1) (+ current old) current)  \r\n            )  \r\n        )  \r\n    )  \r\n    (define fib  \r\n        (lambda [index]  \r\n            (fibr index 1 0)  \r\n        )  \r\n    )  \r\n    (fib 4)  \r\n    5  \r\n\r\n\r\nTo Run\r\n======\r\n\r\n    cd python  \r\n    ./bin/repl.py  \r\n\r\n\r\nFeatures\r\n========\r\n\r\nSupports Booleans\r\n-----------------\r\n- true and false\r\n- (not true) false - negate given boolean\r\n- (and false true true) false - \"and\" any number of booleans together\r\n- (or false true true) true - \"or\" any number of booleans together\r\n\r\n\r\nSupports Integers\r\n-----------------\r\n- (+ 4 3 3) 10 - add any number of ints\r\n- (- 5 1 1) 3 - subtract any number of ints from the first int\r\n- (\\* 2 2 2) 8 - multiply any number of ints\r\n- (= 2 2 3) false - return true if any number of ints are equal\r\n- (> 5 4 3) true - return true if any number of ints are in descending order\r\n- (< 4 3 4) false - return true if any number of ints are in ascending order\r\n\r\n\r\nSupports Conditional Branching\r\n------------------------------\r\n- (if true 4 0) 4 - branch based on condition\r\n\r\n\r\n\r\nSupports variable assignment\r\n----------------------------\r\n- (define a 4)(+ a 1) 5 - define a mapping in the environment for later reference\r\n\r\n\r\nSupports lambdas\r\n----------------\r\n- (lambda \\[num\\] (+ num 1)) - returns a lambda that will add one to it's single argument when called\r\n- (define square (lambda \\[i\\] (\\* i i)))(square 5) 25 - assign a lambda to a variable to reference later\r\n\r\n\r\nSupports structs and member access\r\n----------------------------------\r\n- (struct x y) - returns a struct node that has members \"x\" and \"y\"\r\n- (define person (struct height weight))(define quinten (person 178 77))quinten - returns a struct instantiation of a \"person\" with members \"height\" and \"weight\"\r\n- (define person (struct height weight))(define quinten (person 178 77))(member quinten height)- returns the \"person\" \"quinten\"s \"height\" which is 178\r\n\r\n\r\nTodo\r\n====\r\n\r\n- Implement type checker\r\n- Add methods to structs to support classes\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}